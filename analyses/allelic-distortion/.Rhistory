carrier_means = unlist(lapply(carrier_hits, mean))
non_carrier_hits = calculate_hits(non_carriers)
non_carrier_means = unlist(lapply(non_carrier_hits, mean))
t.test(carrier_means, non_carrier_means)
wilcox.test(carrier_means, non_carrier_means)
dels_with_carrier_hit_indices = which(lapply(carrier_hits, sum) > 0)
non_zero_carrier_hits = carrier_hits[dels_with_carrier_hit_indices]
non_zero_non_carrier_hits = non_carrier_hits[dels_with_carrier_hit_indices]
non_zero_carrier_hits_means = unlist(lapply(non_zero_carrier_hits, mean))
non_zero_non_carrier_hits_means = unlist(lapply(non_zero_non_carrier_hits, mean))
t.test(non_zero_carrier_hits_means, non_zero_non_carrier_hits_means)
wilcox.test(non_zero_carrier_hits_means, non_zero_non_carrier_hits_means)
boxplot(carrier_means)
boxplot(non_carrier_means)
boxplot(non_zero_carrier_hits)
boxplot(non_zero_carrier_means)
boxplot(non_zero_carrier_hits_means)
boxplot(log(non_zero_carrier_hits_means))
boxplot(log(non_zero_non_carrier_hits_means))
boxplot(log(non_zero_carrier_hits_means), log(non_zero_non_carrier_hits_means))
boxplot(log(carrier_means), log(non_carrier_means))
carrier_means
boxplot(carrier_means, non_carrier_means)
boxplot(log(non_zero_carrier_hits_means), log(non_zero_non_carrier_hits_means))
boxplot(log(non_zero_carrier_hits_means), log(non_zero_non_carrier_hits_means))
par(2,1)
require(ggplot2)
ggplot(log(non_zero_carrier_hits_means), aes(value, fill=variable)) + geom_histogram(position="dodge")
ggplot(as.data.frame(log(non_zero_carrier_hits_means)), aes(value, fill=variable)) + geom_histogram(position="dodge")
ggplot(as.data.frame(log(non_zero_carrier_hits_means)) + geom_histogram(position="dodge")
)
ggplot(as.data.frame(log(non_zero_carrier_hits_means))) + geom_histogram(position="dodge")
hist(log(non_zero_carrier_hits_means))
hist(log(non_zero_non_carrier_hits_means), add=T)
hist(log(non_zero_carrier_hits_means))
hist(log(non_zero_carrier_hits_means), col=gb(0.1,0.1,0.1,0.5))
hist(log(non_zero_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
box()
par(mfrow=c(1,2))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_carrier_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_carrier_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.1,0.1,0.1,0.5), ylim=30)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.1,0.1,0.1,0.5), ylim=c(0,30))
hist(log(non_carrier_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
summary(non_carrier_means)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.1,0.1,0.1,0.5), ylim=c(0,60))
hist(log(non_carrier_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.1,0.1,0.1,0.5), ylim=c(0,100))
hist(log(non_carrier_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.1,0.1,0.1,0.5), ylim=c(0,200))
hist(log(non_carrier_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.1,0.1,0.1,0.5), ylim=c(0,250))
hist(log(non_carrier_means), col=rgb(0.8,0.8,0.8,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0,250))
hist(log(non_carrier_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0,250))
hist(log(non_carrier_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0, 250))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0,250))
hist(log(non_carrier_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0, 50))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0,250))
hist(log(non_carrier_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0, 50))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
carrier_hits = lapply(carrier_hits, function(x) 2*x)
carrier_means = unlist(lapply(carrier_hits, mean))
non_carrier_hits = calculate_hits(non_carriers)
non_carrier_means = unlist(lapply(non_carrier_hits, mean))
t.test(carrier_means, non_carrier_means)
wilcox.test(carrier_means, non_carrier_means)
dels_with_carrier_hit_indices = which(lapply(carrier_hits, sum) > 0)
non_zero_carrier_hits = carrier_hits[dels_with_carrier_hit_indices]
non_zero_non_carrier_hits = non_carrier_hits[dels_with_carrier_hit_indices]
non_zero_carrier_hits_means = unlist(lapply(non_zero_carrier_hits, mean))
non_zero_non_carrier_hits_means = unlist(lapply(non_zero_non_carrier_hits, mean))
t.test(non_zero_carrier_hits_means, non_zero_non_carrier_hits_means)
wilcox.test(non_zero_carrier_hits_means, non_zero_non_carrier_hits_means)
boxplot(log(non_zero_carrier_hits_means), log(non_zero_non_carrier_hits_means))
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0,250))
hist(log(non_carrier_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0, 50))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
t.test(carrier_means, non_carrier_means)
wilcox.test(carrier_means, non_carrier_means)
carrier_hits =  calculate_hits(het_carriers)
carrier_means = unlist(lapply(carrier_hits, mean))
non_carrier_hits = calculate_hits(non_carriers)
non_carrier_means = unlist(lapply(non_carrier_hits, mean))
t.test(carrier_means, non_carrier_means)
wilcox.test(carrier_means, non_carrier_means)
# Get rid of observations where there were 0 SNVs observed in deletion carriers
dels_with_carrier_hit_indices = which(lapply(carrier_hits, sum) > 0)
non_zero_carrier_hits = carrier_hits[dels_with_carrier_hit_indices]
non_zero_non_carrier_hits = non_carrier_hits[dels_with_carrier_hit_indices]
non_zero_carrier_hits_means = unlist(lapply(non_zero_carrier_hits, mean))
non_zero_non_carrier_hits_means = unlist(lapply(non_zero_non_carrier_hits, mean))
t.test(non_zero_carrier_hits_means, non_zero_non_carrier_hits_means)
wilcox.test(non_zero_carrier_hits_means, non_zero_non_carrier_hits_means)
boxplot(log(non_zero_carrier_hits_means), log(non_zero_non_carrier_hits_means))
par(mfrow=c(1,2))
hist(log(carrier_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0,250))
hist(log(non_carrier_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
hist(log(non_zero_carrier_hits_means), col=rgb(0.8,0.8,0.8,0.5), ylim=c(0, 50))
hist(log(non_zero_non_carrier_hits_means), col=rgb(0.1,0.1,0.1,0.5),  add=T)
summary(carrier_hits)
lapply(carrier_hits, summary)
lapply(carrier_hits, max)
max(unlist(lapply(carrier_hits, max)))
which(lapply(carrier_hits, max) == 0.000343879)
which(lapply(carrier_hits, max) == max(lapply(carrier_hits, max)))
which(lapply(carrier_hits, max) == max(unlist(lapply(carrier_hits, max))))
carrier_hits[360]
max(carrier_hits[360])
max(unlist(carrier_hits[360]))
max(unlist(non_carrier_hits[360]))
which(lapply(non_carrier_hits, max) == max(lapply(non_carrier_hits, max)))
which(lapply(non_carrier_hits, max) == max(unlist(lapply(non_carrier_hits, max))))
max_carrier_density_index = which(lapply(carrier_hits, max) == max(unlist(lapply(carrier_hits, max))))
carrier_hits[max_carrier_density_index]
non_carrier_hits[max_carrier_density_index]
max(unlist(non_carrier_hits[360]))
max(unlist(carrier_hits[max_carrier_density_index]))
max(unlist(non_carrier_hits[max_carrier_density_index]))
max_non_carrier_density_index = which(lapply(non_carrier_hits, max) == max(unlist(lapply(non_carrier_hits, max))))
max(unlist(carrier_hits[max_non_carrier_density_index]))
max(unlist(non_carrier_hits[max_non_carrier_density_index]))
carrier_means
max(carrier_means)
max(non_carrier_means)
max(carrier_means, na.rm=TRUE)
which(carrier_means == max(carrier_means, na.rm=TRUE))
non_carrier_means[2]
max_mean_carrier_density_index = which(carrier_means == max(carrier_means, na.rm=TRUE))
carrier_means[max_mean_carrier_density_index]
non_carrier_means[max_mean_carrier_density_index]
max_mean_non_carrier_density_index = which(non_carrier_means == max(non_carrier_means, na.rm=TRUE))
carrier_means[max_mean_non_carrier_density_index]
non_carrier_means[max_mean_non_carrier_density_index]
t.test(carrier_means, non_carrier_means)
wilcox.test(carrier_means, non_carrier_means)
head(snv_hits)
head(carrier_hits)
head(het_carriers)
het_carriers$donor_unique_id == snv_hits$donor_unique_id
dim(snv_hits)
dim(het_carriers)
match(het_carriers$donor_unique_id, snv_hits$donor_unique_id)
use = match(het_carriers$donor_unique_id, snv_hits$donor_unique_id)
z = snv_hits[use,]
dim(z)
z$donor_unique_id
z$donor_unique_id == het_carriers$donor_unique_id
head(het_carriers)
het_carriers[,1]
table(het_carriers[,1])
table(het_carriers[,2])
snv_hits[het_carriers[,2] == 1,2]
median(snv_hits[het_carriers[,2] == 1,2])
median(snv_hits[het_carriers[,2] == 1,2], na.rm = T)
c(median(snv_hits[het_carriers[,2] == 1,2], na.rm = T), median(snv_hits[het_carriers[,2] == 0,2], na.rm = T))
x = list();for(i in 1:100) {x[[i]] = c(median(snv_hits[het_carriers[,i] == 1,i], na.rm = T), median(snv_hits[het_carriers[,i] == 0,i], na.rm = T))
}
x
do.call(rbind, x)
plot(x)
x
do.call(rbind, x)
plot(do.call(rbind, x))
colnames(snv_hits)
snv_hits[,382]
colSums(snv_hits[,1:382] > 0)
colSums(snv_hits[,1:381] > 0)
hist(colSums(snv_hits[,1:381] > 0))
colSums(snv_hits[,1:381] > 0) > 100
use = colSums(snv_hits[,1:381] > 0) > 100
z
colSums(snv_hits[,1:382] > 0) > 100
head(non_carriers)
dim(het_carriers)
dim(non_carriers)
head(snv_hit)
head(snv_hits)
snv_hits[,1]
hist(snv_hits[,1])
n = het_carriers
n
head(n)
n[,1]
table(n[,1])
table(n[,2])
table(n[,3])
table(n[,4])
snv_hits[,4]
split(snv_hits[,4], het_carriers[,4])
dim(z)
dim(snv_hits)
split(z[,4], het_carriers[,4])
lapply(split(z[,4], het_carriers[,4]), function(x) sum(x > 0, na.rm = T))
unlist(lapply(split(z[,4], het_carriers[,4]), function(x) sum(x > 0, na.rm = T)))
x = list();for(i in 1:380) {x[[i]] = unlist(lapply(split(z[,i], het_carriers[,i]), function(x) sum(x > 0, na.rm = T)))
}
x
do.call(rbind, x)
colSums(x)
do.call(rbind, x)
colSums(do.call(rbind, x))
x = do.call(rbind, x)
head(x)
rowSums(x)
hist(rowSums(x))
hist(rowSums(x),20)
summary(x)
plot(x)
x[,2]
x[,2] >= 10
x[x[,2] >= 10,]
colSums(het_carriers[,1:380])
x
x[,2]
x[x[,2] > 10,]
z[,1]
cor.test(z[,1], het_carriers[,1], method = "spearman")
cor.test(z[,1], het_carriers[,1], method = "spearman")$p.value
pvals = c();for(i in 1:380) {pvals[i] = cor.test(z[,i], het_carriers[,i], method = "spearman")$p.value
}
pvals
hist(-log10(pvals))
pvals[pvals < 0.05,]
pvals[pvals < 0.05]
pvals[is.na(pvals)]
pvals[is.na(pvals)] = 1
pvals[pvals < 0.05]
pvals[pvals < 0.01]
hist(pvals)
x
summary(rowSums(x))
pval
pvals
(1:380)[pvals < 0.001]
z[,171]
split(z[,171], het_carriers[,171])
(1:380)[pvals < 0.001]
split(z[,206], het_carriers[,206])
boxplot(split(z[,206], het_carriers[,206]))
(1:380)[pvals < 0.001]
i = 243;boxplot(split(z[,i], het_carriers[,i]))
i = 268;boxplot(split(z[,i], het_carriers[,i]))
rowSums(x)
rowSums(x)
rowSums(x) >= 20
use = rowSums(x) >= 20
pvals[use]
hist(pvals[use])
use = rowSums(x) >= 50
hist(pvals[use])
snv_carriers
dim(z)
head(z)
colSums(het_carriers[,1:380] > 0)
use = colSums(het_carriers[,1:380] > 0) >= 20
sum(use)
use1 = colSums(het_carriers[,1:380] > 0) >= 20
pvals[use1]
hist(pvals[use1])
colSums(z[,1:380] > 0)
colSums(z[,1:380] > 0, na.rm = T)
hist(colSums(z[,1:380] > 0, na.rm = T))
summary(colSums(z[,1:380] > 0, na.rm = T))
use2 = colSums(z[,1:380] > 0, na.rm = T) >= 20
sum(use2)
sum(use1 & use2)
use = use1 & use2
hist(pvals[use])
sum(use < 0.05)
use
sum(pval[use]< 0.05)
sum(pvasl[use]< 0.05)
pvals[use]
pvals[use] < 0.05
(1:380)[use1 & use2 & pvals < 0.05]
i = 48;boxplot(split(z[,i], het_carriers[,48]))
i = 189;boxplot(split(z[,i], het_carriers[,48]))
split(z[,i], het_carriers[,48])
lapply(split(z[,i], het_carriers[,48]), function(x) table(x > 0))
do.call(rbind, lapply(split(z[,i], het_carriers[,48]), function(x) table(x > 0)))
fisher.test(do.call(rbind, lapply(split(z[,i], het_carriers[,48]), function(x) tabl)e(x > 0)))
do.call(rbind, lapply(split(z[,i], het_carriers[,48]), function(x) table(x > 0)))
fisher.test(do.call(rbind, lapply(split(z[,i], het_carriers[,48]), function(x) table(x > 0))))
11/(11+827)
27/(27+1921)
savehistory()
library(VariantAnnotation)
library(data.table)
library(pcawg.common)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(rtracklayer)
library(org.Hs.eg.db)
library(COSMIC.67)
library(calibrate)
library(biomaRt)
library(ggplot2)
library(ggrepel)
library(ggbio)
#Read in metadata
sample_meta = get_pcawg_metadata("~/Downloads/pcawg_data/sample_metadata/pcawg_summary.tsv", split_multi_tumors = F)
sample_meta = keep_first_of_multi_tumors(sample_meta)
clinical_meta = get_clinical_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_donor_clinical_May2016_v2.tsv", sample_meta)
hist_meta = get_histology_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_specimen_histology_May2016_v2.tsv", sample_meta)
#Load germline deletions data
load("~/Downloads/pcawg_data/germline_deletions/dels.Rdata")
#load("~/Downloads/pcawg_data/germline_deletions/dels_chr22.Rdata")
set_deletion_range_ends(deletions)
deletion_genotypes = geno(deletions)$GT[,match(sample_meta$normal_wgs_aliquot_id, colnames(geno(deletions)$GT))]
#Load somatic SNV data
load("~/Downloads/pcawg_data/snv_samples.Rdata")
#load("~/Downloads/pcawg_data/snv_samples_chr22.Rdata")
snv_samples = snv_samples[match(sample_meta$tumor_wgs_aliquot_id, names(snv_samples))]
#Detect and remove samples that are missing deletions or SNV calls
missing_sample_indices = c(which(is.na(colnames(deletion_genotypes))), which(is.na(names(snv_samples))))
sample_meta = sample_meta[-missing_sample_indices,]
clinical_meta = clinical_meta[-missing_sample_indices,]
hist_meta = hist_meta[-missing_sample_indices,]
deletion_genotypes = deletion_genotypes[,-missing_sample_indices]
snv_samples = snv_samples[-missing_sample_indices]
colnames(deletion_genotypes) = sample_meta$donor_unique_id
names(snv_samples) = sample_meta$donor_unique_id
#Compute matrix with 1 for heterozygous carriers of a deletion, 0 for non-carriers (hom ref), and NA for others
deletion_carrier_mask = get_het_carrier_mask(deletion_genotypes)
#Number of het carriers per deletion
carrier_counts = rowSums(deletion_carrier_mask, na.rm = T)
carrier_summary = as.data.frame(table(carrier_counts))
ggplot(log(carrier_summary), aes(x=carrier_counts, y=Freq)) + geom_point() + labs(x="Log(# Carriers)", y="Log(# Deletions)")
min_carrier_count = 5
deletion_filter = which(carrier_counts < min_carrier_count)
deletion_ranges = rowRanges(deletions)[-deletion_filter]
deletion_genotypes = deletion_genotypes[-deletion_filter,]
deletion_carrier_mask = t(deletion_carrier_mask[-deletion_filter,])
#Compute a matrix with count of SNVs overlying each deletion
snv_hits = do.call(rbind, lapply(snv_samples, function(x) as.table(findOverlaps(deletion_ranges, rowRanges(x)))))
colnames(snv_hits) = rownames(deletion_genotypes)
# Normalize each sample by number of SNVs in that sample
# Normalize each deletion by deletion width
del_widths =  width(ranges(deletion_ranges))
snv_counts = unlist(lapply(snv_samples, length))
normalized_snv_hits = snv_hits / snv_counts / del_widths[col(snv_hits)]
wilcox_pvals = c()
# Test each deletion individually, among carriers and non-carriers, via Mann Whitney U test
for(i in 1 : dim(normalized_snv_hits)[2]) {
wilcox_pvals[i] = wilcox.test(normalized_snv_hits[deletion_carrier_mask[,i] == 1,i], normalized_snv_hits[deletion_carrier_mask[,i] == 0,i])$p.value
}
mean_counts = list()
#Calculate mean counts among carriers and non-carriers.
for(i in 1 : dim(normalized_snv_hits)[2]) {
mean_counts[[i]] = c(mean(normalized_snv_hits[deletion_carrier_mask[,i] == 1,i], na.rm = T), mean(normalized_snv_hits[deletion_carrier_mask[,i] == 0,i], na.rm = T))
}
mean_counts = do.call(rbind, mean_counts)
count_df = as.data.frame(mean_counts)
colnames(count_df) = c("carriers", "non_carriers")
count_df$wilcox_pvals = wilcox_pvals
count_df$widths = width(deletion_ranges)
count_df$carrier_counts = carrier_counts[-deletion_filter]
mean_difs = mean_counts[,1] - mean_counts[,2]
mean_ratios = mean_counts[,1] / mean_counts[,2]
pre_flanks = flank(deletion_ranges, width(deletion_ranges) / 2, start = T)
pre_hits = do.call(rbind, lapply(snv_samples, function(x) as.table(findOverlaps(pre_flanks, rowRanges(x)))))
post_flanks = flank(deletion_ranges, width(deletion_ranges) / 2, start = F)
post_hits = do.call(rbind, lapply(snv_samples, function(x) as.table(findOverlaps(post_flanks, rowRanges(x)))))
flank_hits = pre_hits + post_hits
normalized_flank_hits = flank_hits / snv_counts / del_widths[col(flank_hits)]
mean_flank_counts = list()
for(i in 1 : dim(normalized_snv_hits)[2]) {
mean_flank_counts[[i]] = c(mean(normalized_snv_hits[deletion_carrier_mask[,i] == 1,i], na.rm = T), mean(normalized_flank_hits[deletion_carrier_mask[,i] == 1,i], na.rm = T))
}
flank_wilcox_pvals = c()
flank_ttest_pvals = c()
flank_cors = c()
for(i in 1 : dim(normalized_snv_hits)[2]) {
#flank_pvals[i] = t.test(na.omit(normalized_snv_hits[deletion_carrier_mask[,i] == 1,i]), na.omit(normalized_flank_hits[deletion_carrier_mask[,i] == 1,i]))$p.value
flank_wilcox_pvals[i] = wilcox.test(na.omit(normalized_snv_hits[deletion_carrier_mask[,i] == 1,i]), na.omit(normalized_flank_hits[deletion_carrier_mask[,i] == 1,i]), paired = T)$p.value
flank_ttest_pvals[i] = t.test(na.omit(normalized_snv_hits[deletion_carrier_mask[,i] == 1,i]), na.omit(normalized_flank_hits[deletion_carrier_mask[,i] == 1,i]), paired = T)$p.value
flank_cors[i] = cor(na.omit(normalized_snv_hits[deletion_carrier_mask[,i] == 1,i]), na.omit(normalized_flank_hits[deletion_carrier_mask[,i] == 1,i]))
}
mean_flank_counts = do.call(rbind, mean_flank_counts)
mean_flank_difs = mean_flank_counts[,1] - mean_flank_counts[,2]
flank_df = as.data.frame(mean_flank_counts)
colnames(flank_df) = c("dels", "flanks")
flank_df$widths = width(deletion_ranges)
flank_df$carrier_counts = carrier_counts[-deletion_filter]
flank_df$wilcox_pvals = flank_wilcox_pvals
flank_df$ttest_pvals = flank_ttest_pvals
flank_df$chr = as.character(seqnames(deletion_ranges))
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
ch = import.chain("~/Downloads/pcawg_data/external_data/hg19ToGRCh37.over.chain")
genes_grch37 = liftOver(genes(txdb), ch)
num_hypotheses = dim(normalized_snv_hits)[2]
significance_threshold = 0.05 / num_hypotheses
#sig_idx = intersect(which(count_df$wilcox_pvals < 0.01), which(flank_df$wilcox_pvals < 0.01))
sig_idx = which(count_df$wilcox_pvals < significance_threshold)
#sig_idx = which(flank_df$wilcox_pvals < significance_threshold)
sig_dels = deletion_ranges[sig_idx]
del_gene_overlaps = findOverlaps(sig_dels, genes_grch37)
gene_hits = genes_grch37[subjectHits(del_gene_overlaps)]
gene_hit_details = select(org.Hs.eg.db, unlist(gene_hits)$gene_id, c("SYMBOL", "GENENAME"))
data("cgc_67", package="COSMIC.67")
if(any(unlist(gene_hits)$gene_id %in% cgc_67$ENTREZID)){
cosmic_gene_hits = gene_hit_details[na.omit(match(cgc_67$ENTREZID, unlist(gene_hits)$gene_id)),]
}
master_hit_df = cbind(flank_df[sig_idx[queryHits(del_gene_overlaps)],], count_df[sig_idx[queryHits(del_gene_overlaps)],], gene_hit_details)
cosmic_hit_idx = match(cosmic_gene_hits$ENTREZID, master_hit_df$ENTREZID)
#Plot test p-values over ratio of mean densities between carriers and non-carriers.
plot_data = data.frame(log10(mean_ratios), -log10(count_df$wilcox_pvals))
colnames(plot_data) = c("x", "y")
plot_data_to_label = plot_data[sig_idx[queryHits(del_gene_overlaps)][cosmic_hit_idx],]
plot_data_to_label$gene_symbol = cosmic_gene_hits$SYMBOL
mapkapk5_row = c(plot_data[sig_idx[queryHits(del_gene_overlaps)][mapkapk5],], master_hit_df[mapkapk5,]$SYMBOL)
names(mapkapk5_row)[3] = "gene_symbol"
plot_data_to_label = rbind(plot_data_to_label, mapkapk5_row)
ggplot(plot_data) + aes(x=x, y=y) + geom_point(size=0.5) +
xlab(expression(paste(log[10](frac(carrier_density,non_carrier_density))))) +
ylab(expression(paste(-log[10](p-value)))) +
geom_abline(aes(intercept=-log10(significance_threshold), slope=0), col="red") +
geom_point(data=plot_data_to_label, aes(x=x, y=y), size=3, col="red") +
geom_label_repel(data=plot_data_to_label,
aes(x, y, label=gene_symbol),
fontface = 'bold', color = 'white',
box.padding = unit(0.25, "lines"),
point.padding = unit(0.5, "lines"), fill="red")
hs_chrs = as(seqinfo(BSgenome.Hsapiens.1000genomes.hs37d5), "GRanges")
hs_chrs = keepSeqlevels(hs_chrs, c(1:22, "X", "Y"))
g_bins = tileGenome(seqlengths(hs_chrs), tilewidth=1000, cut.last.tile.in.chrom=T)
g_bins_100kb = tileGenome(seqlengths(hs_chrs), tilewidth=100000, cut.last.tile.in.chrom=T)
g_bins_1mb = tileGenome(seqlengths(hs_chrs), tilewidth=1000000, cut.last.tile.in.chrom=T)
a = as.table(findOverlaps(g_bins_1mb, rowRanges(snv_samples[[1]])))
a_idx = seq(a)[which(a >0)]
a = a[which(a >0)]
b = snv_hits[1,] / del_widths * 1000
b2 = b[which(deletion_carrier_mask[1,] == 1)]
deletion_bins = findOverlaps(deletion_ranges, g_bins_1mb)
b2_bins = subjectHits(deletion_bins[which(deletion_carrier_mask[1,] == 1),])
plot.new()
plot_snp_density = data.frame(seq(length(a)),a)
colnames(plot_snp_density) = c("bin", "density")
ggplot(data=plot_snp_density, aes(x=bin, y=density)) + geom_point() +  geom_smooth(span=0.00000000001)
smoothScatter(seq(length(a)),a)
spl = smooth.spline(seq(length(a)), a, spar=0.1)
lines(spl, col="green", lwd=2)
points(b2_bins[which(b2 >0)], b2[which(b2>0)], col = "red")
setwd("~/Documents/workspace/pcawg-germline/analyses/allelic-distortion/")
#Read in metadata
sample_meta = get_pcawg_metadata("~/Downloads/pcawg_data/sample_metadata/pcawg_summary.tsv", split_multi_tumors = F)
sample_meta = keep_first_of_multi_tumors(sample_meta)
clinical_meta = get_clinical_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_donor_clinical_May2016_v2.tsv", sample_meta)
hist_meta = get_histology_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_specimen_histology_May2016_v2.tsv", sample_meta)
devtools::load_all(pkg="pcawg.common")
devtools::load_all(pkg="~/Documents/workspace/pcawg-germline/analyses/deletion-mutation-density/pcawg.common")
#Read in metadata
sample_meta = get_pcawg_metadata("~/Downloads/pcawg_data/sample_metadata/pcawg_summary.tsv", split_multi_tumors = F)
sample_meta = keep_first_of_multi_tumors(sample_meta)
clinical_meta = get_clinical_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_donor_clinical_May2016_v2.tsv", sample_meta)
hist_meta = get_histology_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_specimen_histology_May2016_v2.tsv", sample_meta)
library(VariantAnnotation)
tab = TabixFile("/Users/siakhnin/Downloads/pcawg_data/somatic_snv_mnv/b9f03936-1de5-4330-8b0f-6d0ab533876e.annotated.snv_mnv.vcf.gz")
my_snv_sample = readVcf(tab, "hs37d5")
rowRanges(my_snv_sample)
snv_samples = read_snv_samples_from_vcf("~/Downloads/pcawg_data/test_snv/", sample_meta)
sample_meta = get_pcawg_metadata("~/Downloads/pcawg_data/sample_metadata/pcawg_summary.tsv", split_multi_tumors = F)
sample_meta = keep_first_of_multi_tumors(sample_meta)
clinical_meta = get_clinical_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_donor_clinical_May2016_v2.tsv", sample_meta)
hist_meta = get_histology_metadata("~/Downloads/pcawg_data/clinical_metadata/pcawg_specimen_histology_May2016_v2.tsv", sample_meta)
snv_samples = read_snv_samples_from_vcf("~/Downloads/pcawg_data/test_snv/", sample_meta)
snv_genotypes = geno(snv_samples)$GT
unlist(snv_samples)
snv_genotypes = geno(unlist(snv_samples))$GT
unlist(snv_samples)
lapply(snv_samples, geno)
snv_samples[[1]]
geno(snv_samples[[1]])
snv_samples[[1]]
rowRanges(snv_samples[[1]])
